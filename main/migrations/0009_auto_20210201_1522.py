# Generated by Django 3.1.2 on 2021-02-01 08:22

import annoying.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0008_buildingconstruction_attic_overlapping_thickness'),
    ]

    operations = [
        migrations.CreateModel(
            name='EngineeringCommunication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_supply_organization', models.CharField(blank=True, max_length=50, null=True, verbose_name='Энергоснабжающая организация')),
                ('electric_cable_accessory', models.CharField(blank=True, max_length=50, null=True, verbose_name='Принадлежность электрокабеля')),
                ('required_power_supply_reliability_category', models.IntegerField(blank=True, null=True, verbose_name='Категория надежности электроснабжения (Требуемая)')),
                ('actual_power_supply_reliability_category', models.IntegerField(blank=True, null=True, verbose_name='Категория надежности электроснабжения (Фактическая)')),
                ('availability_of_backup_power_supplies', models.CharField(blank=True, max_length=50, null=True, verbose_name='Наличие резервных источников электропитания')),
                ('permitted_power', models.IntegerField(blank=True, null=True, verbose_name='Разрешенная мощность')),
                ('ground_loop', models.BooleanField(blank=True, null=True, verbose_name='Наличие контура заземления')),
                ('count_of_energy_saving_lamps_for_indoor_lighting', models.IntegerField(blank=True, null=True, verbose_name='Количество энергосберегающих ламп внутреннего освещения')),
                ('count_of_incandescent_lamps_for_indoor_lighting', models.IntegerField(blank=True, null=True, verbose_name='Количество ламп накаливания внутреннего освещения')),
                ('count_of_energy_saving_outdoor_lamps', models.IntegerField(blank=True, null=True, verbose_name='Количество энергосберегающих ламп наружного освещения')),
                ('count_of_incandescent_outdoor_lamps', models.IntegerField(blank=True, null=True, verbose_name='Количество ламп накаливания наружного освещения')),
                ('technical_condition_of_the_internal_power_supply_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы внутреннего электроснабжения')),
                ('technical_condition_of_the_external_power_supply_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы наружного электроснабжения')),
                ('centralized_storm_sewer_system', models.BooleanField(blank=True, null=True, verbose_name='Наличие централизованной системы ливневой канализации на территории образовательного учреждения')),
                ('the_number_of_wells_of_the_storm_sewer_system', models.IntegerField(blank=True, null=True, verbose_name='Количество колодцев системы ливневой канализации на территории учреждения')),
                ('storm_water_inlet', models.BooleanField(blank=True, null=True, verbose_name='Наличие централизованной системы ливневой канализации на территории образовательного учреждения')),
                ('number_of_storm_water_inlets', models.IntegerField(blank=True, null=True, verbose_name='Количество дождеприемников на территории учреждения')),
                ('water_occurs_onto_low_relief', models.BooleanField(blank=True, null=True, verbose_name='Слив дождевой и талой воды происходит самотеком на пониженный рельеф местности')),
                ('heat_power_supply_organization', models.CharField(blank=True, max_length=50, null=True, verbose_name='Энергоснабжающая организация')),
                ('heat_point_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип теплового пункта')),
                ('ITP_commissioning_year', models.IntegerField(blank=True, null=True, verbose_name='Год ввода в эксплуатацию ИТП')),
                ('year_of_acceptance_on_maintenance', models.IntegerField(blank=True, null=True, verbose_name='Год принятия на баланс или техобслуживание')),
                ('heat_supply_source', models.CharField(blank=True, max_length=50, null=True, verbose_name='Источник теплоснабжения')),
                ('heat_powered_by_camera', models.CharField(blank=True, max_length=50, null=True, verbose_name='Питание от камеры №')),
                ('heat_power_supply_from_line', models.CharField(blank=True, max_length=50, null=True, verbose_name='Питание от магистрали №')),
                ('operational_responsibility_boundary', models.CharField(blank=True, max_length=50, null=True, verbose_name='Граница эксплуатационной ответственности')),
                ('hot_water_connection_diagram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Схема подключение горячего водоснабжения')),
                ('heating_system_connection_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип присоединения системы отопления ')),
                ('Temperature_graph', models.CharField(blank=True, max_length=50, null=True, verbose_name='Температурный график')),
                ('heating_system_wiring_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Тип разводки системы отопления')),
                ('thermal_loads_heating', models.IntegerField(blank=True, null=True, verbose_name='Температурный график (Отопление)')),
                ('thermal_loads_hot_water_supply', models.IntegerField(blank=True, null=True, verbose_name='Температурный график (Горячее водоснабжение)')),
                ('thermal_loads_ventilation', models.IntegerField(blank=True, null=True, verbose_name='Температурный график (Вентиляция)')),
                ('thermal_loads_total', models.IntegerField(blank=True, null=True, verbose_name='Температурный график (Суммарная)')),
                ('number_of_automatic_heat_control_systems', models.IntegerField(blank=True, null=True, verbose_name='Количество систем автоматического регулирования тепла')),
                ('number_of_automatic_control_systems_for_the_air_handling_unit', models.IntegerField(blank=True, null=True, verbose_name='Количество систем автоматического регулирования приточной установки')),
                ('technical_condition_of_the_heating_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы отопления')),
                ('technical_condition_of_the_ventilation_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы вентиляции')),
                ('technical_condition_of_the_hot_water_supply_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы горячего водоснабжения')),
                ('water_supply_organization', models.CharField(blank=True, max_length=50, null=True, verbose_name='Водоснабжающая организация')),
                ('technical_condition_of_the_water_supply_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы водоснабжения')),
                ('technical_condition_of_the_sewerage_system', models.CharField(blank=True, max_length=50, null=True, verbose_name='Техническое состояние системы канализирования')),
            ],
            options={
                'verbose_name': 'Инженерные коммуникации',
            },
        ),
        migrations.AddField(
            model_name='building',
            name='engineering_communication',
            field=annoying.fields.AutoOneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.engineeringcommunication', verbose_name='Инженерные коммуникации'),
        ),
    ]
